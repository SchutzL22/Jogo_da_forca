# Trabalho 1 - Jogo da forca
# Nome do Estudante: Lucas Alexandre Vieira Schutz

import random
import string
import os
import time

ARQUIVO_LISTA_PALAVRAS = "palavras.txt"
# ARQUIVO_LISTA_PALAVRAS = os.path.join(os.path.dirname(__file__), "palavras.txt")
# Linha acima para caso de erro ao carregar
# Deu erro no meu, porque abri num arquivo com todos os meus projetos em pastas separadas
# Este codigo faz procurar na pasta espec√≠fica onde est√° sendo rodado o arquivo

def carregar_palavras():
    """
    SA√çDA: lista, uma lista de palavras v√°lidas.  As palavras
    s√£o strings em letra min√∫scula.

    Dependendo do tamanho da lista de palavras, esta fun√ß√£o pode
    demorar um pouco para terminar.
    """
    print("Carregando lista de palavras de arquivo...")
    noArquivo = open(ARQUIVO_LISTA_PALAVRAS, 'r')
    linha = noArquivo.readline()
    lista_de_palavras = linha.split()
    print(" ", len(lista_de_palavras), "palavras carregadas.")
    return lista_de_palavras

def escolhe_palavra(lista_de_palavras):
    """
    ENTRADA: 'lista_de_palavras': uma lista de palavras (strings)
    SA√çDA: Uma palavra escolhida da lista
    """
    return random.choice(lista_de_palavras)

lista_de_palavras = carregar_palavras()

def jogador_venceu(palavra_secreta, letras_escolhidas):
    """
    ENTRADA: 'palavra_secreta', uma string em letras min√∫sculas que o usu√°rio
             deve adivinhar
             'letras_escolhidas': lista de letras min√∫sculas que o jogador
             escolheu at√© agora para adivinhar a palavra
    SA√çDA: True, se todas as letras de 'palavra_secreta' est√£o em 
           'letras_escolhidas' e False caso contr√°rio
    """
    for letra in palavra_secreta:
        if letra not in letras_escolhidas:
            return False
    return True


def progresso_atual_da_palavra(palavra_secreta, letras_escolhidas):
    """
    ENTRADA: 'palavra_secreta', string em letra min√∫scula que usu√°rio est√°
             adivinhando.
             'letras_escolhidas', uma lista de letras min√∫sculas que o jogador
             escolheu at√© agora
    SA√çDA: Uma string formada por letras e asteriscos (*) que representam letras
           na palavra secreta que ainda n√£o foram adivinhadas
    """
    resultado = ""
    for letra in palavra_secreta:
        if letra in letras_escolhidas:
            resultado += letra
        else:
            resultado += "*"
    return resultado


def letras_ainda_disponiveis(letras_escolhidas):
    """
    ENTRADA: 'letras_escolhidas', lista de letras min√∫sculas que o usu√°rio
             escolheu at√© agora.
    SA√çDA: Uma string formada por todas as letras que ainda n√£o foram escolhidas.
           As letras devem ser retornadas em ordem alfab√©tica.
    """
    alfabeto = "abcdefghijklmnopqrstuvwxyz"
    disponiveis = ""
    for letra in alfabeto:
        if letra not in letras_escolhidas:
            disponiveis += letra
    return disponiveis


def forca(palavra_secreta, com_ajuda):
    """
    ENTRADA: 'palavra_secreta', uma string representando uma palavra a ser
             adivinhada
             'com_ajuda', um valor booleano que ativa a funcionalidade de ajuda
             se verdadeiro

    Isso inicia um jogo interativo de Forca.

    * No come√ßo do jogo, deixe o usu√°rio saber quantas letras
      a string 'palavra_secreta' cont√©m e quantas tentativas ele tem de
      escolher letras.

    * O usu√°rio deve come√ßar com 10 tentativas.

    * Antes de cada rodada, voc√™ deve mostrar ao usu√°rio quantas tentativas
      ele ainda tem  e as letras que ele ainda n√£o escolheu.

    * Pe√ßa ao usu√°rio para escolher uma letra por rodada. Lembre-se de
      checar se o usu√°rio realmente est√° inserindo uma s√≥ letra (ou
      o caractere de ajuda  '!' se a funcionalidade de ajuda est√° ativa)

    * Se o usu√°rio escolher uma consoante incorreta, ele perde UMA tentativa,
      mas se ele escolher uma vogal incorreta (a, e, i, o, u),
      ent√£o ele perde DUAS tentativas.

    * O usu√°rio deve receber informa√ß√µes imediatamente
      ap√≥s cada tentativa de escolher uma letra para que ele saiba
      se a letra escolhida aparece na palavra secreta.

    * Depois de cada escolha, voc√™ deve mostrar ao usu√°rio a palavra
      parcialmente adivinhada at√© agora.

    -----------------------------------
    A funcionalidade 'com_ajuda' 
    -----------------------------------
    * Se a escolha for o s√≠mbolo !, voc√™ deve revelar ao usu√°rio uma das letras
      faltantes da palavra ao custo de 3 tentativas. Se o usu√°rio n√£o tem
      3 tentativas restantes, imprima uma mensagem de aviso. Do contr√°rio,
      adicione esta letra √† lista de letras adivinhadas e continue jogando
      normalmente.
    """
    tentativas = 10
    letras_escolhidas = []

    time.sleep(2)
    os.system('cls' if os.name == 'nt' else 'clear')
    print("üéâ Bem-vindo ao jogo da Forca! üéâ")
    print(f"A palavra secreta tem {len(palavra_secreta)} letras.")
    time.sleep(2)
    os.system('cls' if os.name == 'nt' else 'clear')

    while tentativas > 0 and not jogador_venceu(palavra_secreta, letras_escolhidas):
        print(f"\nTentativas restantes: {tentativas}")
        print("Letras dispon√≠veis:", letras_ainda_disponiveis(letras_escolhidas))
        print("Palavra:", progresso_atual_da_palavra(palavra_secreta, letras_escolhidas))

        chute = input("Digite uma letra (ou '!' para ajuda): ").lower()

        if chute == "!" and com_ajuda:
            if tentativas < 3:
                print("üò¢ Voc√™ n√£o tem tentativas suficientes para usar ajuda!")
            else:
                faltando = [l for l in palavra_secreta if l not in letras_escolhidas]
                if faltando:
                    letra_revelada = random.choice(faltando)
                    letras_escolhidas.append(letra_revelada)
                    tentativas -= 3
                    print(f"üÜò Ajuda usada! -3 tentativas! A letra '{letra_revelada}' foi revelada.")
            time.sleep(2)
            os.system('cls' if os.name == 'nt' else 'clear')

        if len(chute) != 1 or chute not in "abcdefghijklmnopqrstuvwxyz!":
            print("‚ùå Digite apenas uma letra do alfabeto!")
            time.sleep(2)
            os.system('cls' if os.name == 'nt' else 'clear')
            continue

        if chute in letras_escolhidas:
            print("‚ö†Ô∏è Voc√™ j√° tentou essa letra!")
            time.sleep(2)
            os.system('cls' if os.name == 'nt' else 'clear')
            continue

        letras_escolhidas.append(chute)

        if chute in palavra_secreta:
            print(f"‚úÖ Boa! A letra '{chute}' est√° na palavra.")
        elif chute == "!":
            continue
        else:
            if chute in "aeiou":
                tentativas -= 2
                print(f"‚ùå Ahh, '{chute}' n√£o est√° na palavra! -2 tentativas!")
            else:
                tentativas -= 1
                print(f"‚ùå Ahh, '{chute}' n√£o est√° na palavra! -1 tentativa!")

        time.sleep(2)
        os.system('cls' if os.name == 'nt' else 'clear')

    if jogador_venceu(palavra_secreta, letras_escolhidas):
        pontos = calcular_pontuacao(tentativas, palavra_secreta)
        print(f"üéâ Parab√©ns! Voc√™ venceu! A palavra era: {palavra_secreta} üòé")
        print(f"üèÜ Sua pontua√ß√£o foi: {pontos}")
        print(f"Voc√™ usou {tentativas} tentativas!")
    else:   
        print(f"üò¢ Voc√™ perdeu! A palavra era: {palavra_secreta}")
        print("üèÜ Sua pontua√ß√£o foi: 0")
        print(f"Voc√™ usou {tentativas} tentativas!")



def calcular_pontuacao(tentativas, palavra_secreta):
    if tentativas <= 0:
        return 0
    letras_distintas = len(set(palavra_secreta))
    return tentativas + 4 * letras_distintas + 3 * len(palavra_secreta)


if __name__ == "__main__":
    palavra_secreta = escolhe_palavra(lista_de_palavras)
    com_ajuda = True
    forca(palavra_secreta, com_ajuda)